#pragma once
#include <iterator>
#include <type_traits> // std::is_scoped_enum, std::underlying_type
#include <vector>

#define EXPAND_ENUM_ITERATOR (void(sizeof(0)))

namespace std
{
	// ============================ //
	// === CONCEPT: scoped_enum === //
	// ============================ //
	template<typename T>
	concept scoped_enum = std::is_scoped_enum_v<T>;

	// ================================= //
	// === VALUE: enum_cardinality_v === //
	// ================================= //
	template<scoped_enum E>
	struct enum_cardinality
	{
		static constexpr std::size_t value = /* compiler-generated (recursive) magic here */ 1;
	};

	template<scoped_enum E>
	std::size_t enum_cardinality_v = std::enum_cardinality<E>::value;

	// ========================= //
	// === TYPE: enum_type_t === //
	// ========================= //
	template<scoped_enum E>
	struct enum_type
	{
		using type = std::underlying_type<E>::type;
	};

	template<scoped_enum E>
	using enum_type_t = enum_type<E>::type;

	// =========================== //
	// === VALUE: enum_value_v === //
	// =========================== //
	// template<typename E>
	// requires scoped_enum<enum_type_t<E>>
	// struct enum_value
	// {
	// 	static constexpr auto value = static_cast<enum_type<E>::type>(E);
	// };

	// ================================= //
	// === ITERATOR: enum_iterator_v === //
	// ================================= //
	template<scoped_enum E>
	class enum_iterator
	{
		class IteratorWrapper
		{
			static E sValues[std::enum_cardinality_v<E>];
			struct iterator
			{
				// iterator implementation...
			};
		};

		static constexpr IteratorWrapper value = IteratorWrapper();
	};

	template<scoped_enum E>
	using enum_iterator_v = enum_iterator<E>::value;

	// template<scoped_enum E>
	// class enum_iterator = std::vector<E>;
	// using enum_iterator = std::vector<E>;
	// {
	// 	class iterator
	// 	{
	// 		void begin() {}
	// 		void end() {}
	// 		void cbegin() {}
	// 		void cend() {}
	// 	};
	// };
	// using enum_iterator = std::contiguous_iterator<E>;

}
