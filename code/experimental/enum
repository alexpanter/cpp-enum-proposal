#pragma once
#include <iterator>
#include <type_traits> // std::is_scoped_enum, std::underlying_type
#include <vector>

#define EXPAND_ENUM_ITERATOR (void(sizeof(0)))

namespace std
{
	// ============================ //
	// === CONCEPT: scoped_enum === //
	// ============================ //
	template<typename T>
	concept scoped_enum = std::is_scoped_enum_v<T>;

	// ================================= //
	// === VALUE: enum_cardinality_v === //
	// ================================= //
	template<scoped_enum E>
	struct enum_cardinality
	{
		static constexpr std::size_t value = /* compiler-generated (recursive) magic here */ 1;
	};

	template<scoped_enum E>
	std::size_t enum_cardinality_v = std::enum_cardinality<E>::value;

	// ================================= //
	// === VALUE: enum_position_v === //
	// ================================= //
	template<std::scoped_enum T, T E>
	struct enum_position {
		// TODO: Perhaps we _can_ actually use some template meta-programming to do this?
		static constexpr std::size_t value = 0; // <-- compiler implements this
	};

	template<std::scoped_enum T, T E>
	std::size_t enum_position_v = std::enum_position<T, E>::value;

	// ========================= //
	// === TYPE: enum_type_t === //
	// ========================= //
	template<scoped_enum E>
	struct enum_type
	{
		using type = std::underlying_type<E>::type;
	};

	// NOTE: Since C++23 we have std::to_underlying :
	// template<class Enum>
	// constexpr std::underlying_type_t<Enum> to_underlying(Enum e);
	// This is equivalent to:
	// return static_cast<std::underlying_type_t<Enum>>(e);

	template<scoped_enum E>
	using enum_type_t = std::enum_type<E>::type;

	// ========================= //
	// === VALUE: enum_value === //
	// ========================= //
	template<scoped_enum Enum>
	constexpr std::enum_type_t<Enum> enum_value(Enum e) noexcept
	{
		// TODO: Is is fine to erase this and use the shorter version?
		// return static_cast<std::underlying_type_t<Enum>>(e);
		return static_cast<std::enum_type_t<Enum>>(e);
	}

	// ================================= //
	// === ITERATOR: enum_iterator_v === //
	// ================================= //
	template<scoped_enum E>
	class enum_iterator
	{
		class IteratorWrapper
		{
			static E sValues[std::enum_cardinality_v<E>];
			struct iterator
			{
				// iterator implementation...
			};
		};

		static constexpr IteratorWrapper value = IteratorWrapper();
	};

	template<scoped_enum E>
	using enum_iterator_v = enum_iterator<E>::value;

	// template<scoped_enum E>
	// class enum_iterator = std::vector<E>;
	// using enum_iterator = std::vector<E>;
	// {
	// 	class iterator
	// 	{
	// 		void begin() {}
	// 		void end() {}
	// 		void cbegin() {}
	// 		void cend() {}
	// 	};
	// };
	// using enum_iterator = std::contiguous_iterator<E>;

	template<std::scoped_enum T>
	requires std::is_unsigned_v<std::enum_type_t<T>>
	class enum_bitmask
	{
		using type = std::enum_type_t<T>;
	public:
		inline enum_bitmask() { t = type{0}; }
		inline constexpr enum_bitmask(T _t) { t = std::enum_value<T>(_t); }
		inline constexpr enum_bitmask(enum_bitmask& b) { t = b.t; }
		inline enum_bitmask& operator= (T _t)
		{
			t = std::enum_value<T>(_t); return *this;
		}

		inline bool empty() { return t == type{0}; }
		inline void add_flag(T _t) { t |= std::enum_value<T>(_t); }
		inline bool has_flag(T _t) { return t & std::enum_value<T>(_t); }
		inline void clear() { t = type{0}; }

		inline constexpr bool operator& (T _t) const
		{
			return t & std::enum_value<T>(_t);
		}

		inline constexpr enum_bitmask operator| (T _t) const
		{
			return static_cast<T>(t | std::enum_value<T>(_t));
		}

		inline enum_bitmask& operator|=(T _t)
		{
			t |= std::enum_value<T>(_t); return *this;
		}
		inline constexpr type operator()() const
		{
			return t;
		}

		inline bool operator== (const enum_bitmask& b) { return t == b.t; }

	private:
		std::enum_type_t<T> t;
	};

}

// =============================== //
// === COMPARISON: operator<=> === //
// =============================== //
template<std::scoped_enum T>
constexpr std::weak_ordering operator<=>(T t, std::integral auto i)
{
	return std::enum_value(t) <=> i;
}

template<std::scoped_enum T>
std::weak_ordering operator<=>(T s, T t)
{
	return std::enum_value(s) <=> std::enum_value(t);
}

// ========================== //
// === BITFLAG operations === //
// ========================== //
template<std::scoped_enum T>
constexpr std::enum_bitmask<T> operator| (T s, T t)
{
	return std::enum_bitmask(s) | t;
}

template<std::scoped_enum T>
constexpr bool operator& (T _t, const std::enum_bitmask<T>& b)
{
	return b() & std::enum_value<T>(_t);
}

template<std::scoped_enum T>
constexpr bool operator& (std::enum_type_t<T> f, T t)
{
	return f & std::enum_value(t);
}

template<std::scoped_enum T>
constexpr bool operator& (T t, std::enum_type_t<T> f)
{
	return std::enum_value(t) & f;
}
