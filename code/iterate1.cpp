#include "experimental/enum"
#include <iostream>

// Perhaps this is compiler-dependent (tested with GCC 12), but:
// scoped enums are implicitly generated as integers, so we can do
// `static_cast<int>(Color::green)` and always get 1.
// This behaviour is used to implement the enumerator.
enum class Color { red, green, blue, yellow };

enum class IntEnum : int { val1 = 0, val2, val3 };
static_assert(std::is_same_v<std::enum_type_t<IntEnum>, int>);
//static_assert(std::is_same_v<std::underlying_type_t<IntEnum>, int>);

// These SHOULD be generated by the compiler to support this proposal:
std::vector<Color> C;

int main()
{
	int h = static_cast<int>(Color::green);
	std::cout << "h=" << h << '\n';

	// for (auto col = std::enum_iterator_v<Color>)
	// {

	// }

	// Color c = static_cast<Color>(h);
	// std::cout << c << '\n';

	std::vector<int> v;
	for (auto it = v.begin(); it != v.end(); it++) {}
	for (auto i : {1, 2, 3}) {}


	return h;
}
